- DISTINCT (To remove duplicate records)
- PASSWORD('')
- flush privileges
- grant * to 'username'@'localhost' identified by'';
- CREATE TABLE {}();
- PRIMARY KEY
- MAKE ATTRIBUTE PRIMARY KEY
PRIMARY KEY({ATTRIBUTE NAMES})
- ADD PRIMARY KEY EXPLICITLY TO TABLE
ALTER TABLE {TABLE NAME} ADD PRIMARY KEY ({ATTRIBUTE NAME});
- Drop Primary Key
ALTER TABLE {} DROP PRIMARY KEY ;

- Modifying Attribute Constraints
ALTER TABLE {Table Name}
	MODIFY {VARIABLE} {TYPE} () {CONSTRAINT};

- Drop Default Constraint
ALTER TABLE {TABLE NAME}
	ALTER COLUMN {VARIABLE} DROP DEFAULT;
- To update table constraints
ALTER TABLE {TABLE NAME}
	MODIFY {COLUMN_NAME} {TYPE} {CONSTRAINTS_SEP_BY_SPACES}

- USER DEFINED CONSTRAINTS FOR TABLE (E.G. FOR UNIQUE ONLY)
ALTER TABLE {TABLE NAME}
	ADD CONSTRAINT {CONSTRAINT_NAME} {UNIQUE}(ATTRIBUTES_IN_TABLE)

- DROP USER DEFINED CONSTRAINT (E.G. FOR UNIQUE ONLY)
ALTER TABLE {TABLE NAME}
	DROP CONSTRAINT {CONSTRAINT NAME}

- Foreign Key
In any table reference the other table
{CUR_VARIABLE} {DATA TYPE} REFERENCES {TABLE}({ATTRIBUTE NAME})

Explicity foreign key
ALTER TABLE {TABLE NAME}
	ADD FOREIGN KEY ({CUR_VARIABLE}) REFERENCES {TABLE NAME} (OTHER_VARIABLE);

Drop foreign key
ALTER TABLE {TABLE NAME}
	DROP FOREIGN KEY;

- Check Constraint
At the end of attribute => CHECK({ATTRIBUTE} {OPERATION} {VALUE});
Explicitly
ALTER TABLE {TABLE NAME}
	MODIFY {VARIABLE} {TYPE} {CONSTRAINT} CHECK ();
User defined
ALTER TABLE {TABLE NAME}
	ADD CONSTRAINT {CONSTRAINT NAME} CHECK();
Drop Constraint
ALTER TABLE {TABLE NAME}
	DROP CONSTRAINT {CONSTRAINT_VARIABLE};

CHECKLIST:
- INDEXING
- TIMESTAMP
- Difference between all and any
- VIEW RULES
- DATE METHODS(OPS) {https://www.tutorialspoint.com/sql/sql-date-functions.htm}
- CLONE TABLES
- SQL INJECTION
- DATABASE TUNING

SYNTAX:
- SELECT
SELECT {COL_SEP_SPACES}
	FROM {TABLE NAME};
	WHERE {CONDITION} {AND|OR} {CONDITION};
DISTINCT (FOR DISTINCT VALUES)
IN:
SELECT * FROM {TABLE NAME} WHERE {COLUMN NAME} IN ({VARIABLES});
LIKE:
SELECT * FROM {TABLE NAME} WHERE  {COLUMN NAME} LIKE {PATTERN};
ORDER BY:
SELECT * FROM {TABLE NAME} WHERE  {CONDITION} ORDER BY {COLUMN NAME} {ASC|DESC}
GROUP BY:
SELECT * FROM {TABLE NAME} WHERE  {CONDITION} GROUP BY {COLUMN NAME};
COUNT: To return no. of rows
SELECT COUNT(COL_NAME) FROM {TABLE NAME} WHERE {CONDITION};
HAVING:
SELECT * FROM {TABLE NAME} WHERE  {CONDITION} GROUP BY {COLUMN NAME} HAVING {ARITHMETIC CONDITION};

DESCRIBE TABLE:
- DESC {TABLE NAME};
TRUNCATE TABLE:
- TRUNCATE TABLE {TABLE NAME};

CHANGE TABLE NAME:
- ALTER TABLE {PREV_NAME} RENAME TO {NEW_NAME};

UPDATE CONTENT OF ROWS:
- UPDATE {TABLE NAME}
	SET {COL_NAME} = {VALUE}; WHERE {CONDITION};
DELETE ROWS:
- DELETE FROM {TABLE NAME} WHERE {CONDITION};

SUBQUERY AND CONDITION KEYWORDS:
ALL (compare all values)
AND (in where clause)
ANY (any value as per condition)
BETWEEN (between min and max) between 26 AND 28
EXISTS (search for presence of row) in subquery (if true then)
IN (compare in list of values) used in where
LIKE (compare similar values) regular expression
NOT (reverse the meaning of all other operators)
OR
IS NULL (used in where)
UNIQUE

- 'AS' KEYWORD
Eg: SELECT (15+6) AS ADDITION

- SELECT CURRENT_TIMESTAMP; (Returns current timestamp)
- SELECT GETDATE(); (returns current date)

- Create table from another table:
CREATE TABLE {TABLE_NAME} AS (write a select query from another table)

DATABASE:
- CREATE DATABASE {DATABASE NAME};
- SHOW DATABASES;
- DROP DATABASE {DATABASE NAME};
- USE {DATABASE NAME};

INSERT INTO TABLE:
- INSERT INTO {TABLE NAME}(COLUMN_NAMES) VALUES ({VALUES})[,({VALUES})];

- REG EXPRESSSIONS
%200% - 200 IN ANY POSITION
2_%_% - THAT START WITH 2 AND ATLEAST ARE 3 CHARACTERS IN LENGTH

TOP:
Select TOP number * from {} where{};
or 
use limit {number} (instead of top);
or 
where ROWNUM<= {NUMBER};

USE FULL JOIN TO COMBINE ALL ROWS
OR USE UNION ALL FOR LEFT AND RIGHT JOIN

FOR CARTESIAN JUST SELECT * FROM {TABLE 1}, {TABLE 2};

UNION - WITH DUPLICATES
UNION ALL - NO DUPLICATES

EXCEPT - RETURNS ROWS THAT ARE IN FIRST BUT NOT IN SECOND

HAVING CLAUSE ORDER:
SELECT
FROM 
WHERE
GROUP BY
HAVING
ORDER BY


- AUTO_INCREMENT (Use in create table to automatically increment stuff)
- AUTO_INCREMENT = 100 (To start from 100)




